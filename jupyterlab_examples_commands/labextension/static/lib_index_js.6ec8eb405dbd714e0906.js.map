{"version":3,"sources":["webpack://@jupyterlab-examples/commands/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAA8E;AACtB;AACzB;AACE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,kDAAkD,+CAAQ;AAC1D,sDAAsD,+CAAQ;AAC9D,WAAW,gDAAmB;AAC9B,QAAQ,gDAAmB,UAAU,SAAS,2CAA2C,EAAE;AAC3F,YAAY,gDAAmB,WAAW,SAAS,uBAAuB,EAAE;AAC5E,gBAAgB,gDAAmB,WAAW,wGAAwG;AACtJ;AACA,YAAY,gDAAmB;AAC/B,gBAAgB,gDAAmB,WAAW,0GAA0G;AACxJ;AACA,QAAQ,gDAAmB,SAAS,SAAS,oBAAoB,EAAE;AACnE,YAAY,gDAAmB,YAAY,oEAAoE,iBAAiB;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB,EAAE;AACnB;AACO,+BAA+B,6DAAW;AACjD;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAmB,mBAAmB,oCAAoC;AACzF;AACA;AACA;AACA;AACA;AACO;AACP;AACA,yBAAyB,+DAAa;AACtC;AACA;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC","file":"lib_index_js.6ec8eb405dbd714e0906.js","sourcesContent":["import { ReactWidget, showDialog, ToolbarButton } from '@jupyterlab/apputils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport * as React from 'react';\nimport { useState } from 'react';\nconst uploadCommand = (share) => {\n    let formData = new FormData();\n    formData.append('notebook', new File([JSON.stringify(share.notebook.toJSON())], share.filename));\n    formData.append('enable-annotations', String(share.enableAnnotations));\n    formData.append('enable-discovery', String(share.enableDiscovery));\n    return new Promise((resolve, reject) => {\n        fetch('http://localhost:8000/api/notebook', {\n            method: \"POST\",\n            body: formData,\n            headers: {\n                'Accept': 'application/json'\n            }\n        }).then(response => {\n            if (!response.ok) {\n                // response.text().then(text => setErrorMessage(text))\n                // setIsUploading(false)\n            }\n            else {\n                response.json().then(data => {\n                    resolve(data.url);\n                }).catch(err => {\n                    // setErrorMessage(String(err));\n                    // setIsUploading(false)\n                });\n            }\n        }).catch(err => {\n            // setErrorMessage(String(err))\n            // setIsUploading(false)\n        });\n    });\n};\nconst UploadInterface = (props) => {\n    const [enableDiscovery, setEnableDiscovery] = useState(false);\n    const [enableAnnotations, setEnableAnnotations] = useState(false);\n    return React.createElement(\"div\", null,\n        React.createElement(\"form\", { style: { display: \"flex\", flexDirection: \"column\" } },\n            React.createElement(\"label\", { style: { marginBottom: \"16px\" } },\n                React.createElement(\"input\", { type: \"checkbox\", checked: !enableDiscovery, onChange: (ev) => setEnableDiscovery(!ev.target.checked) }),\n                \"Hide from search engines\"),\n            React.createElement(\"label\", null,\n                React.createElement(\"input\", { type: \"checkbox\", checked: enableAnnotations, onChange: (ev) => setEnableAnnotations(ev.target.checked) }),\n                \"Allow viewer annotations\")),\n        React.createElement(\"div\", { style: { marginTop: \"32px\" } },\n            React.createElement(\"button\", { className: \"jp-Dialog-button jp-mod-styled jp-mod-accept\", style: { float: \"right\" }, onClick: () => {\n                    const share = {\n                        notebook: props.notebookPanel.model,\n                        filename: props.notebookPanel.title.label,\n                        enableDiscovery: enableDiscovery,\n                        enableAnnotations: enableAnnotations\n                    };\n                    uploadCommand(share).then((url) => {\n                        alert(url);\n                    });\n                } }, \"Upload\")));\n};\nexport class UploadDialogBody extends ReactWidget {\n    constructor(notebookPanel) {\n        super();\n        this.notebookPanel = notebookPanel;\n    }\n    render() {\n        return React.createElement(UploadInterface, { notebookPanel: this.notebookPanel });\n    }\n}\n/**\n * A notebook widget extension that adds a button to the toolbar.\n */\nexport class ButtonExtension {\n    createNew(panel, context) {\n        let button = new ToolbarButton({\n            className: 'myButton',\n            iconClass: 'fa fa-fast-forward',\n            onClick: () => {\n                showDialog({\n                    title: \"Share notebook\",\n                    body: new UploadDialogBody(panel),\n                    buttons: []\n                });\n            },\n            tooltip: 'Run All'\n        });\n        panel.toolbar.insertItem(-1, 'shareToNotebookSharingSpace', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nconst extension = {\n    id: 'commands',\n    autoStart: true,\n    activate: (app) => {\n        app.docRegistry.addWidgetExtension('Notebook', new ButtonExtension());\n    }\n};\nexport default extension;\n"],"sourceRoot":""}